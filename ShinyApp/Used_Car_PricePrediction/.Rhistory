col="red")
plot(sin,0,2*pi)
plot(tan,0,2*pi)
plot(tan,0,pi/2)
plot(tan,-pi/2,pi/2)
plot(dnorm,-3,3)
#-------------------------------------------------------------------
plot(dnorm,-3,+3,
col="red",
lwd=10)
#-------------------------------------------------------------------
plot(dnorm,-3,+3,
col="red",
lwd=4)
#-------------------------------------------------------------------
plot(dnorm,-3,+3,
col="red",
lwd=4,
main="graph of Normal Distribution")
#-------------------------------------------------------------------
plot(dnorm,-3,+3,
col="red",
lwd=4,
main="Graph of Normal Distribution")
#-------------------------------------------------------------------
plot(dnorm,-3,+3,
col="red",
lwd=4,
main="Graph of Normal Distribution",
xlab="x-axis",
ylab="y-axis")
?mtcars
head(mtcars)
print(mtcars$cyl)
print(mtcars)
mtcars
plot(mtcars$cyl)
barplot(mtcars$cyl)
# to make it proper we need to make data object to save the graph
DataCollector <- table(mtcars$cyl)
barplot(mtcars$cyl,col="red")
barplot(DataCollector,col="red")
barplot(DataCollector,col="#ff6400")
barplot(DataCollector,col="#ff6400",lwd=3)
plot(DataCollector)
head(iris)
hist(iris$Sepal.Length)
hist(iris$Petal.Length)
hist(iris$Sepal.Length)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Width,iris$Petal.Length)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Width)
hist(iris$Sepal.Length [iris$Species =="setosa"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
col = "yellowgreen")
hist(iris$Sepal.Length [iris$Species =="setosa"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "yellowgreen")
par(mfrom = c(3,1))
hist(iris$Sepal.Length [iris$Species =="setosa"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "yellowgreen")
par(mfrom = c(3,1))
par(mfrom = c(3,1))
par(mfrow = c(3,1))
hist(iris$Sepal.Length [iris$Species =="setosa"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "yellowgreen")
hist(iris$petal.Length [iris$Species =="setosa"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "yellowgreen")
hist(iris$petal.Length [iris$Species =="setosa"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "yellowgreen")
hist(iris$Petal.Width [iris$Species =="setosa"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "yellowgreen")
par(mfrow = c(3,1))
hist(iris$Petal.Width [iris$Species =="setosa"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "yellowgreen")
print(iris$Species)
hist(iris$Petal.Width [iris$Species =="versicolor"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "red")
hist(iris$Petal.Width [iris$Species =="virginica"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "blue")
hist(iris$Petal.Width [iris$Species =="virginica"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "skyblue")
hist(iris$Petal.Width [iris$Species =="versicolor"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "red")
hist(iris$Petal.Width [iris$Species =="setosa"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "yellowgreen")
hist(iris$Petal.Width [iris$Species =="virginica"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of virginica",
xlab="",
col = "skyblue")
hist(iris$Petal.Width [iris$Species =="versicolor"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of versicolor",
xlab="",
col = "red")
hist(iris$Petal.Width [iris$Species =="setosa"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "yellowgreen")
setwd("O:/Ds Project/dataset/Used_Car_DataSet")
library(caret)
library(randomForest)
library(dplyr)
data<-read.csv("Final_TrainingDataSet.csv")
# Remove unnecessary columns
data <- data[, !(names(data) %in% c("New_Price", "X","Year"))]
# Extract only the first string from the Name column
# data$Name <- sapply(strsplit(data$Name, " "), function(x) paste(x[1:min(length(x), 2)], collapse=" "))
data$Brand <- sapply(strsplit(data$Name, " "), function(x) paste(x[1:min(length(x), 1)], collapse=" "))
data <- data[, !(names(data) %in% c("Name","X.1"))]
data$Location <- as.factor(data$Location)
data$Fuel_Type <- as.factor(data$Fuel_Type)
data$Transmission <- as.factor(data$Transmission)
data$Owner_Type <- as.factor(data$Owner_Type)
data$Brand<- as.factor(data$Brand)
# Divide dataset into training and testing (75% train, 25% test)
set.seed(123)  # for reproducibility
pd <- sample(2, nrow(data), replace = TRUE, prob = c(0.75,0.25))
train_data <- data[pd == 1, ]
test_data <- data[pd == 2, ]
Price = test_data$Price
test_data <- test_data[, !(names(data) %in% c("Price"))]
# Convert categorical variables to factors with levels from training data
test_data$Location <- factor(test_data$Location, levels = levels(train_data$Location))
test_data$Fuel_Type <- factor(test_data$Fuel_Type, levels = levels(train_data$Fuel_Type))
test_data$Transmission <- factor(test_data$Transmission, levels = levels(train_data$Transmission))
test_data$Owner_Type <- factor(test_data$Owner_Type, levels = levels(train_data$Owner_Type))
test_data$Brand <- factor(test_data$Brand, levels = levels(train_data$Brand))
# Train a Random Forest model for price prediction
rf_model <- randomForest(Price ~ ., data = train_data,iter=300)
# Predict price using test data
predicted_price_rf <- predict(rf_model, newdata = test_data)
# Predict price using test data
predicted_price_rf <- predict(rf_model, newdata = test_data)
# Evaluate the model
# Calculate Mean Absolute Error (MAE)
MAE_rf <- mean(abs(predicted_price_rf - Price))
# Calculate Root Mean Squared Error (RMSE)
RMSE_rf <- sqrt(mean((predicted_price_rf - Price)^2))
# Calculate R-squared value
R_squared_rf <- cor(predicted_price_rf, Price)^2
print(paste("Mean Absolute Error (MAE) with Random Forest:", MAE_rf))
print(paste("Root Mean Squared Error (RMSE) with Random Forest:", RMSE_rf))
print(paste("R-squared with Random Forest:", R_squared_rf))
library(caret)
library(randomForest)
library(dplyr)
data<-read.csv("Final_TrainingDataSet.csv")
# Remove unnecessary columns
data <- data[, !(names(data) %in% c("New_Price", "X","Age"))]
# Extract only the first string from the Name column
# data$Name <- sapply(strsplit(data$Name, " "), function(x) paste(x[1:min(length(x), 2)], collapse=" "))
data$Brand <- sapply(strsplit(data$Name, " "), function(x) paste(x[1:min(length(x), 1)], collapse=" "))
data <- data[, !(names(data) %in% c("Name","X.1"))]
data$Location <- as.factor(data$Location)
data$Fuel_Type <- as.factor(data$Fuel_Type)
data$Transmission <- as.factor(data$Transmission)
data$Owner_Type <- as.factor(data$Owner_Type)
data$Brand<- as.factor(data$Brand)
# Divide dataset into training and testing (75% train, 25% test)
set.seed(123)  # for reproducibility
pd <- sample(2, nrow(data), replace = TRUE, prob = c(0.75,0.25))
train_data <- data[pd == 1, ]
test_data <- data[pd == 2, ]
Price = test_data$Price
test_data <- test_data[, !(names(data) %in% c("Price"))]
# Convert categorical variables to factors with levels from training data
test_data$Location <- factor(test_data$Location, levels = levels(train_data$Location))
test_data$Fuel_Type <- factor(test_data$Fuel_Type, levels = levels(train_data$Fuel_Type))
test_data$Transmission <- factor(test_data$Transmission, levels = levels(train_data$Transmission))
test_data$Owner_Type <- factor(test_data$Owner_Type, levels = levels(train_data$Owner_Type))
test_data$Brand <- factor(test_data$Brand, levels = levels(train_data$Brand))
# Train a Random Forest model for price prediction
rf_model <- randomForest(Price ~ ., data = train_data,iter=300)
# Predict price using test data
predicted_price_rf <- predict(rf_model, newdata = test_data)
# Evaluate the model
# Calculate Mean Absolute Error (MAE)
MAE_rf <- mean(abs(predicted_price_rf - Price))
# Calculate Root Mean Squared Error (RMSE)
RMSE_rf <- sqrt(mean((predicted_price_rf - Price)^2))
# Calculate R-squared value
R_squared_rf <- cor(predicted_price_rf, Price)^2
print(paste("Mean Absolute Error (MAE) with Random Forest:", MAE_rf))
print(paste("Root Mean Squared Error (RMSE) with Random Forest:", RMSE_rf))
print(paste("R-squared with Random Forest:", R_squared_rf))
source("O:/Ds Project/dataset/Used_Car_DataSet/RandomForest.R")
saveRDS(rf_model, file = "random_forest_model.rds")
shiny::runApp('ShinyApp/Used_Car_PricePrediction')
mymodel <- readRDS("O:/Ds Project/dataset/Used_Car_DataSet/random_forest_model.rds")
runApp('ShinyApp/Used_Car_PricePrediction')
runApp('ShinyApp/Used_Car_PricePrediction')
install.packages("ggcorrplot")
library(ggcorrplot)
cor(data)
cor(data$Age)
cor(data)
dataup = c(data$Age,data$Kilometers_Driven,data$Mileage,data$Engine,data$Power,data$Seats,data$Price)
cor(dataup)
dataup = c(data$Age,data$Kilometers_Driven,data$Mileage,data$Engine,data$Power,data$Seats)
cor(dataup)
?cor
cor(dataup, use = "everything",
method = c("pearson", "kendall", "spearman"))
cor(x=dataup,y=NULL, use = "everything",
method = c("pearson", "kendall", "spearman"))
cor(x=dataup,y=dataup, use = "everything",
method = c("pearson", "kendall", "spearman"))
cor(x=dataup,y=dataup, use = "everything",
method = c("pearson", "kendall", "spearman"))
cor(x=dataup,y=data, use = "everything",
method = c("pearson", "kendall", "spearman"))
library(ggcorrplot)
data <- data[, !(names(data) %in% c("New_Price", "X","Year","Location","Name","Brand","Fuel_Type","Owner_Type","Transmission"))]
cor(x=dataup,y=dataup, use = "everything",
method = c("pearson", "kendall", "spearman"))
cor(x=data,y=data, use = "everything",
method = c("pearson", "kendall", "spearman"))
cor(data)
cor = round(cor(data),1)
cor
ggcorrplot(cor)
ggcorrplot(cor,lab=TRUE)
ggcorrplot(cor,lab=TRUE,theme_dark())
ggcorrplot(cor,lab=TRUE,ggtheme = theme_minimal())
ggcorrplot(cor,lab=TRUE,ggtheme = theme_dark())
ggcorrplot(cor,lab=TRUE,ggtheme = theme_update())
data<- read.csv("Final_TrainingDataSet.csv")
names(data)
library(ggplot2)
library(tidyverse)
# Extract only the first string from the Name column
data$Name <- sapply(strsplit(data$Name, " "), function(x) paste(x[1:min(length(x), 2)], collapse=" "))
data$Brand <- sapply(strsplit(data$Name, " "), function(x) paste(x[1:min(length(x), 1)], collapse=" "))
values_to_remove <- c("Datsun Redi", "Fiat Siena", "ISUZU D-MAX", "Mercedes-Benz CLS-Class", "Mini Clubman", "Nissan Evalia", "Porsche Boxster", "Tata Venture", "Volkswagen Beetle")
# Convert required columns to factor
# this column have more than 53 levels or categories
data$Name <- as.numeric(as.factor(data$Name))
data$Location <- as.factor(data$Location)
data$Fuel_Type <- as.factor(data$Fuel_Type)
data$Transmission <- as.factor(data$Transmission)
data$Owner_Type <- as.factor(data$Owner_Type)
data$Brand<- as.factor(data$Brand)
library(ggcorrplot)
data <- data[, !(names(data) %in% c("New_Price", "X","Location","Name","Brand","Fuel_Type","Owner_Type","Transmission"))]
cor(data)
cor = round(cor(data),1)
ggcorrplot(cor,lab=TRUE,ggtheme = theme_update())
data <- data[, !(names(data) %in% c("New_Price", "X","Year","Location","Name","Brand","Fuel_Type","Owner_Type","Transmission"))]
cor(data)
cor = round(cor(data),1)
ggcorrplot(cor,lab=TRUE,ggtheme = theme_update())
ggcorrplot(cor,lab=TRUE,ggtheme = theme_update(),colors = black)
ggcorrplot(cor,lab=TRUE,ggtheme = theme_update(),colors = "black")
ggcorrplot(cor,lab=TRUE,ggtheme = theme_update(),colors = "red")
data <- data[, !(names(data) %in% c("X.1","New_Price", "X","Year","Location","Name","Brand","Fuel_Type","Owner_Type","Transmission"))]
cor(data)
cor = round(cor(data),1)
ggcorrplot(cor,lab=TRUE,ggtheme = theme_update(),colors = "")
ggcorrplot(cor,lab=TRUE,ggtheme = theme_update())
data<- read.csv("Final_TrainingDataSet.csv")
names(data)
library(ggcorrplot)
data <- data[, !(names(data) %in% c("X.1","New_Price", "X","Year","Location","Name","Brand","Fuel_Type","Owner_Type","Transmission"))]
cor(data)
cor = round(cor(data),1)
ggcorrplot(cor,lab=TRUE,ggtheme = theme_update())
ggcorrplot(cor,lab=TRUE,ggtheme = theme_update(),colors="indianred,white,royalblue")
ggcorrplot(cor,lab=TRUE,ggtheme = theme_update(),colors=c("indianred","white","royalblue")
ggcorrplot(cor,lab=TRUE,ggtheme = theme_update(),colors=c("indianred","white","royalblue"))
ggcorrplot(cor,lab=TRUE,ggtheme = theme_update(),colors=c("indianred","white","royalblue"))
kilo_brand
library(ggplot2)
library(tidyverse)
# Extract only the first string from the Name column
data$Name <- sapply(strsplit(data$Name, " "), function(x) paste(x[1:min(length(x), 2)], collapse=" "))
data$Brand <- sapply(strsplit(data$Name, " "), function(x) paste(x[1:min(length(x), 1)], collapse=" "))
values_to_remove <- c("Datsun Redi", "Fiat Siena", "ISUZU D-MAX", "Mercedes-Benz CLS-Class", "Mini Clubman", "Nissan Evalia", "Porsche Boxster", "Tata Venture", "Volkswagen Beetle")
# Convert required columns to factor
# this column have more than 53 levels or categories
data$Name <- as.numeric(as.factor(data$Name))
data$Location <- as.factor(data$Location)
data$Fuel_Type <- as.factor(data$Fuel_Type)
data$Transmission <- as.factor(data$Transmission)
data$Owner_Type <- as.factor(data$Owner_Type)
data$Brand<- as.factor(data$Brand)
data<- read.csv("Final_TrainingDataSet.csv")
names(data)
library(ggplot2)
library(tidyverse)
# Extract only the first string from the Name column
data$Name <- sapply(strsplit(data$Name, " "), function(x) paste(x[1:min(length(x), 2)], collapse=" "))
data$Brand <- sapply(strsplit(data$Name, " "), function(x) paste(x[1:min(length(x), 1)], collapse=" "))
values_to_remove <- c("Datsun Redi", "Fiat Siena", "ISUZU D-MAX", "Mercedes-Benz CLS-Class", "Mini Clubman", "Nissan Evalia", "Porsche Boxster", "Tata Venture", "Volkswagen Beetle")
# Convert required columns to factor
# this column have more than 53 levels or categories
data$Name <- as.numeric(as.factor(data$Name))
data$Location <- as.factor(data$Location)
data$Fuel_Type <- as.factor(data$Fuel_Type)
data$Transmission <- as.factor(data$Transmission)
data$Owner_Type <- as.factor(data$Owner_Type)
data$Brand<- as.factor(data$Brand)
scatter_plots_Brand <- lapply(c("Age", "Year", "Kilometers_Driven", "Power", "Engine", "Mileage"), function(feature) {
ggplot(data, aes_string(x = feature, y = "Price",color="Brand")) +
geom_point() +
geom_line(color = "black",size=1) +
facet_wrap(~Brand) +
labs(title = paste("Price vs", feature), x = feature, y = "Price")
})
scatter_plots_Fuel <- lapply(c("Age", "Year", "Kilometers_Driven", "Power", "Engine", "Mileage"), function(feature) {
ggplot(data, aes_string(x = feature, y = "Price",color="Brand")) +
geom_point() +
geom_line(color = "black",size=1) +
facet_wrap(~Fuel_Type) +
labs(title = paste("Price vs", feature), x = feature, y = "Price")
})
kilo_brand <- ggplot(data, aes(x = Kilometers_Driven, y = Price, color = Brand)) +
geom_point(size=3,alpha=0.4) +
geom_line(color = "black",size=1) +
scale_x_continuous(limits = c(171,500000)) +
facet_wrap(~Brand) +
labs(title = "Kilometers_Driven vs Price with Trendline", x = "Kilometers_Driven", y = "Price")
kilo_brand
install.packages("metan")
library(metan)
All <- corr_coef(data)
plot(All)
data <- data[, !(names(data) %in% c("X.1","New_Price", "X","Year","Location","Name","Brand","Fuel_Type","Owner_Type","Transmission"))]
All <- corr_coef(data)
plot(All)
data<- read.csv("Final_TrainingDataSet.csv")
data <- data[, !(names(data) %in% c("X.1","New_Price", "X","Year"))]
All <- corr_coef(data)
plot(All)
cor(data)
cor = round(cor(data),1)
library(ggcorrplot)
cor(data)
cor = round(cor(data),1)
library(ggcorrplot)
library(metan)
data <- data[, !(names(data) %in% c("X.1","New_Price", "X","Year","Location","Name","Brand","Fuel_Type","Owner_Type","Transmission"))]
All <- corr_coef(data)
plot(All)
cor(data)
cor = round(cor(data),1)
ggcorrplot(cor,lab=TRUE,ggtheme = theme_update(),colors=c("indianred","white","royalblue"))
data <- data[, !(names(data) %in% c("X.1","New_Price", "X","Year","Location","Name","Brand","Fuel_Type","Owner_Type","Transmission","Price"))]
All <- corr_coef(data)
plot(All)
cor(data)
cor = round(cor(data),1)
ggcorrplot(cor,lab=TRUE,ggtheme = theme_update(),colors=c("indianred","white","royalblue"))
library(caret)
library(randomForest)
library(dplyr)
data<-read.csv("Final_TrainingDataSet.csv")
# Remove unnecessary columns
data <- data[, !(names(data) %in% c("New_Price", "X","Year"))]
# Extract only the first string from the Name column
# data$Name <- sapply(strsplit(data$Name, " "), function(x) paste(x[1:min(length(x), 2)], collapse=" "))
data$Brand <- sapply(strsplit(data$Name, " "), function(x) paste(x[1:min(length(x), 1)], collapse=" "))
data <- data[, !(names(data) %in% c("Name","X.1","Power"))]
data$Location <- as.factor(data$Location)
data$Fuel_Type <- as.factor(data$Fuel_Type)
data$Transmission <- as.factor(data$Transmission)
data$Owner_Type <- as.factor(data$Owner_Type)
data$Brand <- as.factor(data$Brand)
# Divide dataset into training and testing (75% train, 25% test)
set.seed(123)  # for reproducibility
pd <- sample(2, nrow(data), replace = TRUE, prob = c(0.75,0.25))
train_data <- data[pd == 1, ]
test_data <- data[pd == 2, ]
Price = test_data$Price
test_data <- test_data[, !(names(data) %in% c("Price"))]
# Convert categorical variables to factors with levels from training data
test_data$Location <- factor(test_data$Location, levels = levels(train_data$Location))
test_data$Fuel_Type <- factor(test_data$Fuel_Type, levels = levels(train_data$Fuel_Type))
test_data$Transmission <- factor(test_data$Transmission, levels = levels(train_data$Transmission))
test_data$Owner_Type <- factor(test_data$Owner_Type, levels = levels(train_data$Owner_Type))
test_data$Brand <- factor(test_data$Brand, levels = levels(train_data$Brand))
# Train a Random Forest model for price prediction
rf_model <- randomForest(Price ~ ., data = train_data,iter=300)
# Predict price using test data
predicted_price_rf <- predict(rf_model, newdata = test_data)
# Evaluate the model
# Calculate Mean Absolute Error (MAE)
MAE_rf <- mean(abs(predicted_price_rf - Price))
# Calculate Root Mean Squared Error (RMSE)
RMSE_rf <- sqrt(mean((predicted_price_rf - Price)^2))
# Calculate R-squared value
R_squared_rf <- cor(predicted_price_rf, Price)^2
print(paste("Mean Absolute Error (MAE) with Random Forest:", MAE_rf))
print(paste("Root Mean Squared Error (RMSE) with Random Forest:", RMSE_rf))
print(paste("R-squared with Random Forest:", R_squared_rf))
library(caret)
library(randomForest)
library(dplyr)
data<-read.csv("Final_TrainingDataSet.csv")
# Remove unnecessary columns
data <- data[, !(names(data) %in% c("New_Price", "X","Year"))]
# Extract only the first string from the Name column
# data$Name <- sapply(strsplit(data$Name, " "), function(x) paste(x[1:min(length(x), 2)], collapse=" "))
data$Brand <- sapply(strsplit(data$Name, " "), function(x) paste(x[1:min(length(x), 1)], collapse=" "))
data <- data[, !(names(data) %in% c("Name","X.1"))]
data$Location <- as.factor(data$Location)
data$Fuel_Type <- as.factor(data$Fuel_Type)
data$Transmission <- as.factor(data$Transmission)
data$Owner_Type <- as.factor(data$Owner_Type)
data$Brand<- as.factor(data$Brand)
# Divide dataset into training and testing (75% train, 25% test)
set.seed(123)  # for reproducibility
pd <- sample(2, nrow(data), replace = TRUE, prob = c(0.75,0.25))
train_data <- data[pd == 1, ]
test_data <- data[pd == 2, ]
Price = test_data$Price
test_data <- test_data[, !(names(data) %in% c("Price"))]
# Convert categorical variables to factors with levels from training data
test_data$Location <- factor(test_data$Location, levels = levels(train_data$Location))
test_data$Fuel_Type <- factor(test_data$Fuel_Type, levels = levels(train_data$Fuel_Type))
test_data$Transmission <- factor(test_data$Transmission, levels = levels(train_data$Transmission))
test_data$Owner_Type <- factor(test_data$Owner_Type, levels = levels(train_data$Owner_Type))
test_data$Brand <- factor(test_data$Brand, levels = levels(train_data$Brand))
# Train a Random Forest model for price prediction
rf_model <- randomForest(Price ~ ., data = train_data,iter=300)
# Predict price using test data
predicted_price_rf <- predict(rf_model, newdata = test_data)
# Evaluate the model
# Calculate Mean Absolute Error (MAE)
MAE_rf <- mean(abs(predicted_price_rf - Price))
# Calculate Root Mean Squared Error (RMSE)
RMSE_rf <- sqrt(mean((predicted_price_rf - Price)^2))
# Calculate R-squared value
R_squared_rf <- cor(predicted_price_rf, Price)^2
print(paste("Mean Absolute Error (MAE) with Random Forest:", MAE_rf))
print(paste("Root Mean Squared Error (RMSE) with Random Forest:", RMSE_rf))
print(paste("R-squared with Random Forest:", R_squared_rf))
runApp('ShinyApp/Used_Car_PricePrediction')
runApp('ShinyApp/Used_Car_PricePrediction')
runApp('ShinyApp/Used_Car_PricePrediction')
wget https://download3.rstudio.org/centos7/x86_64/shiny-server-1.5.21.1012-x86_64.rpm
runApp('ShinyApp/Used_Car_PricePrediction')
setwd("O:/Ds Project/dataset/Used_Car_DataSet")
source("O:/Ds Project/dataset/Used_Car_DataSet/RandomForest.R")
setwd("O:/Ds Project/dataset/Used_Car_DataSet/ShinyApp/Used_Car_PricePrediction")
mymodel <- readRDS("O:/Ds Project/dataset/Used_Car_DataSet/ShinyApp/Used_Car_PricePrediction/mymodel.rds")
mymodel = load("mymodel.rds")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
