b = 20
w = a>b
x = a<b
print(w)
print(x)
class(w)
class(char) #Character
#char
char = "o"
class(char) #Character
#char
char = "omkar"
class(e)
e = a + bi
class(e)
e = 10 + 6i
class(e)
# <-----------------type Conversion---------------------->
comToChar = as.character(e)
class(coToChar)
# <-----------------type Conversion---------------------->
comToChar = as.character(e)
class(coToChar)
class(comToChar)
comToCha
comToChar
clear
match_state<-data.frame(Name = c("Tendulkar","ponting","kallis","Dravid","cook"),Matches = c(200,168,166,164,161),Innings = c(329,287,280,286,291),Highestscore = c(248,257,224,270,294),Average = c(53.78,51.85,55.37,52.31,45.35))
View(match_state)
View(match_state)
match_state
nrow(match_state)
colnames(match_state)
str(match_state)
match_state $Name
match_state $Highestscore
head(match_state,2)
head(match_state)
tail(match_state)
tail(match_state,2)
summary(match_state)
match_state $Half_Cent = c(68,62,58,63,57)
match_state
new_Players<- data.frame(Name = c("Sangakkara","Lara"),Matches = c(134,131),Innings = c(233,232), Highestscore = c(319,400),Average = c(57.40,52.80),Half_Cent = c(52,48))
match_state<- rbind(match_state,new_Players)
match_state
match_state[2,3]
match_state[(4,5),(1,2,3)]
match_state[c(4,5),c(1,2,3)]
match_state[,3]
match_state(1,4)
match_state[1,4]
match_state[match_state $Name == "Tendulkar",4]
match_state[match_state $Highestscore == max(match_state $Highestscore),c(1,5)]
match_state[match_state $Highestscore > 250 ,c(1,2,3,5)]
which(match_state $Highestscore >= 270)
match_state[match_state $Name == "Tendulkar",2]=201
match_state
View(new_Players)
View(match_state)
library(ggplot2)
install.packages("dslabs")
library(dslabs)
library(datasets)
library(datasets)
head(iris)
summary(iris)
plot(iris)
dev.off()
?plot
plot(iris$Sepal.Length)
plot(iris$Species)
plot(iris$Sepal.Length)
plot(iris$Species , iris$Sepal.Length)
plot(iris$Species , iris$Sepal.Length, iris$Sepal.Width)
plot(iris$Species , iris$Sepal.Length, iris$Sepal.Width)
plot(iris$Species , iris$Sepal.Length)
plot(iris$Sepal.Length,iris$Sepal.Width)
plot(iris$Sepal.Length,iris$Petal.Length)
plot(iris$Petal.Length,iris$Petal.Width)
mean(iris$Petal.Length)
plot(iris$Petal.Length,iris$Petal.Width,
col="a363ae",
pch=19,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="a363ae",
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="a363ae",
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#a363ae",
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Species,
col="green",
pch= 20,
main="Species",
xlab="Iris Species",
ylab="Iris Species Count in Dataset")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 20,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
?pch
plot(iris$Species,
col="green", #Color
pch= 10,     #
main="Species",
xlab="Iris Species",
ylab="Iris Species Count in Dataset")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 10,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 30,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 30,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 1,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 5,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 6,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 7,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 8,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 9,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 10,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 11,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 12,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 13,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 15,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 16,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 17,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 18,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 19,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 20,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 21,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 22,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 23,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 19,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 20,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Species,
col="green", #Color
pch= 4,     # for
main="Species",
xlab="Iris Species",
ylab="Iris Species Count in Dataset")
plot(cos,0,2*pi)
plot(cos,0,2*pi,color="red")
plot(cos,0,2*pi,color="red")
plot(cos,0,2*pi,
color="red")
plot(cos,0,2*pi,
col="red")
plot(cos,0,2*pi,
col="red",
pch=10)
plot(cos,0,2*pi,
col="red",
pch=20)
plot(cos,0,2*pi,
col="red",
pch=20)
plot(cos,0,2*pi,
col="red",
pch=1)
plot(cos,0,2*pi,
col="red",
pch=2)
plot(exp,2,10)
plot(exp,1,10)
plot(exp,1,5)
plot(sin,0,2*pi)
plot(cos,0,2*pi,
col="red")
plot(sin,0,2*pi)
plot(tan,0,2*pi)
plot(tan,0,pi/2)
plot(tan,-pi/2,pi/2)
plot(dnorm,-3,3)
#-------------------------------------------------------------------
plot(dnorm,-3,+3,
col="red",
lwd=10)
#-------------------------------------------------------------------
plot(dnorm,-3,+3,
col="red",
lwd=4)
#-------------------------------------------------------------------
plot(dnorm,-3,+3,
col="red",
lwd=4,
main="graph of Normal Distribution")
#-------------------------------------------------------------------
plot(dnorm,-3,+3,
col="red",
lwd=4,
main="Graph of Normal Distribution")
#-------------------------------------------------------------------
plot(dnorm,-3,+3,
col="red",
lwd=4,
main="Graph of Normal Distribution",
xlab="x-axis",
ylab="y-axis")
?mtcars
head(mtcars)
print(mtcars$cyl)
print(mtcars)
mtcars
plot(mtcars$cyl)
barplot(mtcars$cyl)
# to make it proper we need to make data object to save the graph
DataCollector <- table(mtcars$cyl)
barplot(mtcars$cyl,col="red")
barplot(DataCollector,col="red")
barplot(DataCollector,col="#ff6400")
barplot(DataCollector,col="#ff6400",lwd=3)
plot(DataCollector)
head(iris)
hist(iris$Sepal.Length)
hist(iris$Petal.Length)
hist(iris$Sepal.Length)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Width,iris$Petal.Length)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Width)
hist(iris$Sepal.Length [iris$Species =="setosa"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
col = "yellowgreen")
hist(iris$Sepal.Length [iris$Species =="setosa"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "yellowgreen")
par(mfrom = c(3,1))
hist(iris$Sepal.Length [iris$Species =="setosa"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "yellowgreen")
par(mfrom = c(3,1))
par(mfrom = c(3,1))
par(mfrow = c(3,1))
hist(iris$Sepal.Length [iris$Species =="setosa"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "yellowgreen")
hist(iris$petal.Length [iris$Species =="setosa"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "yellowgreen")
hist(iris$petal.Length [iris$Species =="setosa"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "yellowgreen")
hist(iris$Petal.Width [iris$Species =="setosa"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "yellowgreen")
par(mfrow = c(3,1))
hist(iris$Petal.Width [iris$Species =="setosa"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "yellowgreen")
print(iris$Species)
hist(iris$Petal.Width [iris$Species =="versicolor"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "red")
hist(iris$Petal.Width [iris$Species =="virginica"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "blue")
hist(iris$Petal.Width [iris$Species =="virginica"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "skyblue")
hist(iris$Petal.Width [iris$Species =="versicolor"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "red")
hist(iris$Petal.Width [iris$Species =="setosa"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "yellowgreen")
hist(iris$Petal.Width [iris$Species =="virginica"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of virginica",
xlab="",
col = "skyblue")
hist(iris$Petal.Width [iris$Species =="versicolor"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of versicolor",
xlab="",
col = "red")
hist(iris$Petal.Width [iris$Species =="setosa"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "yellowgreen")
shiny::runApp('O:/Ds Project/dataset/Used_Car_DataSet/ShinyApp/Used_Car_PricePrediction')
library(caret)
library(randomForest)
library(dplyr)
data<-read.csv("Final_TrainingDataSet.csv")
data$Location <- as.factor(data$Location)
data$Fuel_Type <- as.factor(data$Fuel_Type)
data<-read.csv("Final_TrainingDataSet.csv")
setwd("O:/Ds Project/dataset/Used_Car_DataSet")
data<-read.csv("Final_TrainingDataSet.csv")
# Remove unnecessary columns
data <- data[, !(names(data) %in% c("New_Price", "X","Year"))]
# Extract only the first string from the Name column
# data$Name <- sapply(strsplit(data$Name, " "), function(x) paste(x[1:min(length(x), 2)], collapse=" "))
data$Brand <- sapply(strsplit(data$Name, " "), function(x) paste(x[1:min(length(x), 1)], collapse=" "))
data <- data[, !(names(data) %in% c("Name","X.1"))]
data$Location <- as.factor(data$Location)
data$Fuel_Type <- as.factor(data$Fuel_Type)
data$Transmission <- as.factor(data$Transmission)
data$Owner_Type <- as.factor(data$Owner_Type)
data$Brand<- as.factor(data$Brand)
# Divide dataset into training and testing (75% train, 25% test)
set.seed(123)  # for reproducibility
pd <- sample(2, nrow(data), replace = TRUE, prob = c(0.75,0.25))
train_data <- data[pd == 1, ]
test_data <- data[pd == 2, ]
write.csv(train_data, file = "train_data.csv")
Price = test_data$Price
test_data <- test_data[, !(names(data) %in% c("Price"))]
# Convert categorical variables to factors with levels from training data
test_data$Location <- factor(test_data$Location, levels = levels(train_data$Location))
test_data$Fuel_Type <- factor(test_data$Fuel_Type, levels = levels(train_data$Fuel_Type))
test_data$Transmission <- factor(test_data$Transmission, levels = levels(train_data$Transmission))
test_data$Owner_Type <- factor(test_data$Owner_Type, levels = levels(train_data$Owner_Type))
test_data$Brand <- factor(test_data$Brand, levels = levels(train_data$Brand))
# Train a Random Forest model for price prediction
rf_model <- randomForest(Price ~ ., data = train_data,iter=300)
# Predict price using test data
predicted_price_rf <- predict(rf_model, newdata = test_data)
# Evaluate the model
# Calculate Mean Absolute Error (MAE)
MAE_rf <- mean(abs(predicted_price_rf - Price))
# Calculate Root Mean Squared Error (RMSE)
RMSE_rf <- sqrt(mean((predicted_price_rf - Price)^2))
# Calculate R-squared value
R_squared_rf <- cor(predicted_price_rf, Price)^2
print(paste("Mean Absolute Error (MAE) with Random Forest:", MAE_rf))
print(paste("Root Mean Squared Error (RMSE) with Random Forest:", RMSE_rf))
print(paste("R-squared with Random Forest:", R_squared_rf))
mymodel <- readRDS("O:/Ds Project/dataset/Used_Car_DataSet/random_forest_model.rds")
shiny::runApp('ShinyApp/Used_Car_PricePrediction')
