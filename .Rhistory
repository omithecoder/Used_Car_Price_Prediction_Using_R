ylab="Petal Width")
?pch
plot(iris$Species,
col="green", #Color
pch= 10,     #
main="Species",
xlab="Iris Species",
ylab="Iris Species Count in Dataset")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 10,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 30,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 30,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 1,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 5,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 6,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 7,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 8,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 9,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 10,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 11,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 12,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 13,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 15,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 16,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 17,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 18,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 19,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 20,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 21,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 22,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 23,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 19,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Petal.Length,iris$Petal.Width,
col="#cc0000",
pch = 20,
main="Iris Petal Length Vs Width",
xlab="Petal Length",
ylab="Petal Width")
plot(iris$Species,
col="green", #Color
pch= 4,     # for
main="Species",
xlab="Iris Species",
ylab="Iris Species Count in Dataset")
plot(cos,0,2*pi)
plot(cos,0,2*pi,color="red")
plot(cos,0,2*pi,color="red")
plot(cos,0,2*pi,
color="red")
plot(cos,0,2*pi,
col="red")
plot(cos,0,2*pi,
col="red",
pch=10)
plot(cos,0,2*pi,
col="red",
pch=20)
plot(cos,0,2*pi,
col="red",
pch=20)
plot(cos,0,2*pi,
col="red",
pch=1)
plot(cos,0,2*pi,
col="red",
pch=2)
plot(exp,2,10)
plot(exp,1,10)
plot(exp,1,5)
plot(sin,0,2*pi)
plot(cos,0,2*pi,
col="red")
plot(sin,0,2*pi)
plot(tan,0,2*pi)
plot(tan,0,pi/2)
plot(tan,-pi/2,pi/2)
plot(dnorm,-3,3)
#-------------------------------------------------------------------
plot(dnorm,-3,+3,
col="red",
lwd=10)
#-------------------------------------------------------------------
plot(dnorm,-3,+3,
col="red",
lwd=4)
#-------------------------------------------------------------------
plot(dnorm,-3,+3,
col="red",
lwd=4,
main="graph of Normal Distribution")
#-------------------------------------------------------------------
plot(dnorm,-3,+3,
col="red",
lwd=4,
main="Graph of Normal Distribution")
#-------------------------------------------------------------------
plot(dnorm,-3,+3,
col="red",
lwd=4,
main="Graph of Normal Distribution",
xlab="x-axis",
ylab="y-axis")
?mtcars
head(mtcars)
print(mtcars$cyl)
print(mtcars)
mtcars
plot(mtcars$cyl)
barplot(mtcars$cyl)
# to make it proper we need to make data object to save the graph
DataCollector <- table(mtcars$cyl)
barplot(mtcars$cyl,col="red")
barplot(DataCollector,col="red")
barplot(DataCollector,col="#ff6400")
barplot(DataCollector,col="#ff6400",lwd=3)
plot(DataCollector)
head(iris)
hist(iris$Sepal.Length)
hist(iris$Petal.Length)
hist(iris$Sepal.Length)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Width,iris$Petal.Length)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Width)
hist(iris$Sepal.Length [iris$Species =="setosa"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
col = "yellowgreen")
hist(iris$Sepal.Length [iris$Species =="setosa"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "yellowgreen")
par(mfrom = c(3,1))
hist(iris$Sepal.Length [iris$Species =="setosa"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "yellowgreen")
par(mfrom = c(3,1))
par(mfrom = c(3,1))
par(mfrow = c(3,1))
hist(iris$Sepal.Length [iris$Species =="setosa"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "yellowgreen")
hist(iris$petal.Length [iris$Species =="setosa"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "yellowgreen")
hist(iris$petal.Length [iris$Species =="setosa"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "yellowgreen")
hist(iris$Petal.Width [iris$Species =="setosa"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "yellowgreen")
par(mfrow = c(3,1))
hist(iris$Petal.Width [iris$Species =="setosa"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "yellowgreen")
print(iris$Species)
hist(iris$Petal.Width [iris$Species =="versicolor"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "red")
hist(iris$Petal.Width [iris$Species =="virginica"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "blue")
hist(iris$Petal.Width [iris$Species =="virginica"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "skyblue")
hist(iris$Petal.Width [iris$Species =="versicolor"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "red")
hist(iris$Petal.Width [iris$Species =="setosa"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "yellowgreen")
hist(iris$Petal.Width [iris$Species =="virginica"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of virginica",
xlab="",
col = "skyblue")
hist(iris$Petal.Width [iris$Species =="versicolor"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of versicolor",
xlab="",
col = "red")
hist(iris$Petal.Width [iris$Species =="setosa"],
xlim = c(0,3),
breaks = 9,
main = "Sepal Length of setosa",
xlab="",
col = "yellowgreen")
shiny::runApp('O:/Ds Project/dataset/Used_Car_DataSet/ShinyApp/Used_Car_PricePrediction')
# Load required libraries
# Load required libraries
library(caret)
setwd("O:/Ds Project/dataset/Used_Car_DataSet")
source("O:/Ds Project/dataset/Used_Car_DataSet/linear_Regression.R")
summary(lm_model)
# Load required libraries
# Load required libraries
library(caret)
library(dplyr)
library(ggplot2)
data<-read.csv("Final_TrainingDataSet.csv")
# Remove unnecessary columns
data <- data[, !(names(data) %in% c("New_Price", "X","Year"))]
values_to_remove <- c("Datsun Redi", "Fiat Siena", "ISUZU D-MAX", "Mercedes-Benz CLS-Class", "Mini Clubman", "Nissan Evalia", "Porsche Boxster", "Tata Venture", "Volkswagen Beetle")
data <- data %>%
filter(!Name %in% values_to_remove)
# Extract only the first string from the Name column
# data$Name <- sapply(strsplit(data$Name, " "), function(x) paste(x[1:min(length(x), 2)], collapse=" "))
data$Brand <- sapply(strsplit(data$Name, " "), function(x) paste(x[1:min(length(x), 1)], collapse=" "))
data <- data[, !(names(data) %in% c("Name","X.1"))]
data$Location <- as.factor(data$Location)
data$Fuel_Type <- as.factor(data$Fuel_Type)
data$Transmission <- as.factor(data$Transmission)
data$Owner_Type <- as.factor(data$Owner_Type)
data$Brand<- as.factor(data$Brand)
# Divide dataset into training and testing (75% train, 25% test)
set.seed(123)  # for reproducibility
pd <- sample(2, nrow(data), replace = TRUE, prob = c(0.75,0.25))
train_data <- data[pd == 1, ]
test_data <- data[pd == 2, ]
test_data <- test_data %>%
filter(!Brand %in% "ISUZU")
write.csv(train_data, file = "train_data.csv")
Price = test_data$Price
test_data <- test_data[, !(names(data) %in% c("Price"))]
# Train a linear model for price prediction
lm_model <- lm(Price ~ ., data = train_data)
# Predict price using filtered test data
predicted_price <- predict(lm_model, newdata = test_data)
# Evaluate the model
# You can add evaluation metrics here based on your preference
MAE <- mean(abs(predicted_price - Price))
RMSE <- sqrt(mean((predicted_price - Price)^2))
R_squared <- summary(lm_model)$r.squared
print(paste("Mean Absolute Error (MAE):", MAE))
print(paste("Root Mean Squared Error (RMSE):", RMSE))
print(paste("R-squared-byModel:", R_squared))
mean_actual_price <- mean(Price)
# Calculate total sum of squares (TSS)
TSS <- sum((Price - mean_actual_price)^2)
# Calculate residual sum of squares (RSS)
RSS <- sum((predicted_price - Price)^2)
# Calculate R-squared value
R_squared <- 1 - (RSS / TSS)
print(paste("R-squared-byCalculation:", R_squared))
summary(lm_model)
sum <- summary(lm_model)
print(sum)
write.table(sum, file, append = FALSE, sep = " ", dec = ".",
row.names = TRUE, col.names = TRUE)
save(sum,file="significance.txt")
save(summary(lm_model),file="significance.txt")
sum
sum<- data.frame(sum)
shiny::runApp('ShinyApp/Used_Car_PricePrediction')
mymodel <- readRDS("O:/Ds Project/dataset/Used_Car_DataSet/random_forest_model.rds")
runApp('ShinyApp/Used_Car_PricePrediction')
unique(train_data$Mileage)
runApp('ShinyApp/Used_Car_PricePrediction')
runApp('ShinyApp/Used_Car_PricePrediction')
runApp('ShinyApp/Used_Car_PricePrediction')
unique(train_data$Power)
runApp('ShinyApp/Used_Car_PricePrediction')
source("O:/Ds Project/dataset/Used_Car_DataSet/linear_Regression.R")
sum
p_values <- summary(lm_model)$coefficients[, 4]
p_values
summary(lm_model)
library(caret)
library(randomForest)
library(dplyr)
data<-read.csv("Final_TrainingDataSet.csv")
# Remove unnecessary columns
data <- data[, !(names(data) %in% c("New_Price", "X","Year"))]
# Extract only the first string from the Name column
# data$Name <- sapply(strsplit(data$Name, " "), function(x) paste(x[1:min(length(x), 2)], collapse=" "))
data$Brand <- sapply(strsplit(data$Name, " "), function(x) paste(x[1:min(length(x), 1)], collapse=" "))
data <- data[, !(names(data) %in% c("Name","X.1"))]
data$Location <- as.factor(data$Location)
data$Fuel_Type <- as.factor(data$Fuel_Type)
data$Transmission <- as.factor(data$Transmission)
data$Owner_Type <- as.factor(data$Owner_Type)
data$Brand<- as.factor(data$Brand)
# Divide dataset into training and testing (75% train, 25% test)
set.seed(123)  # for reproducibility
pd <- sample(2, nrow(data), replace = TRUE, prob = c(0.75,0.25))
train_data <- data[pd == 1, ]
test_data <- data[pd == 2, ]
write.csv(train_data, file = "train_data.csv")
Price = test_data$Price
test_data <- test_data[, !(names(data) %in% c("Price","Seats"))]
# Convert categorical variables to factors with levels from training data
test_data$Location <- factor(test_data$Location, levels = levels(train_data$Location))
test_data$Fuel_Type <- factor(test_data$Fuel_Type, levels = levels(train_data$Fuel_Type))
test_data$Transmission <- factor(test_data$Transmission, levels = levels(train_data$Transmission))
test_data$Owner_Type <- factor(test_data$Owner_Type, levels = levels(train_data$Owner_Type))
test_data$Brand <- factor(test_data$Brand, levels = levels(train_data$Brand))
# Train a Random Forest model for price prediction
rf_model <- randomForest(Price ~ ., data = train_data,iter=300)
# Predict price using test data
predicted_price_rf <- predict(rf_model, newdata = test_data)
library(caret)
library(randomForest)
library(dplyr)
data<-read.csv("Final_TrainingDataSet.csv")
# Remove unnecessary columns
data <- data[, !(names(data) %in% c("New_Price", "X","Year"))]
# Extract only the first string from the Name column
# data$Name <- sapply(strsplit(data$Name, " "), function(x) paste(x[1:min(length(x), 2)], collapse=" "))
data$Brand <- sapply(strsplit(data$Name, " "), function(x) paste(x[1:min(length(x), 1)], collapse=" "))
data <- data[, !(names(data) %in% c("Name","X.1","Seats"))]
data$Location <- as.factor(data$Location)
data$Fuel_Type <- as.factor(data$Fuel_Type)
data$Transmission <- as.factor(data$Transmission)
data$Owner_Type <- as.factor(data$Owner_Type)
data$Brand<- as.factor(data$Brand)
# Divide dataset into training and testing (75% train, 25% test)
set.seed(123)  # for reproducibility
pd <- sample(2, nrow(data), replace = TRUE, prob = c(0.75,0.25))
train_data <- data[pd == 1, ]
test_data <- data[pd == 2, ]
write.csv(train_data, file = "train_data.csv")
Price = test_data$Price
test_data <- test_data[, !(names(data) %in% c("Price","Seats"))]
# Convert categorical variables to factors with levels from training data
test_data$Location <- factor(test_data$Location, levels = levels(train_data$Location))
test_data$Fuel_Type <- factor(test_data$Fuel_Type, levels = levels(train_data$Fuel_Type))
test_data$Transmission <- factor(test_data$Transmission, levels = levels(train_data$Transmission))
test_data$Owner_Type <- factor(test_data$Owner_Type, levels = levels(train_data$Owner_Type))
test_data$Brand <- factor(test_data$Brand, levels = levels(train_data$Brand))
# Train a Random Forest model for price prediction
rf_model <- randomForest(Price ~ ., data = train_data,iter=300)
# Predict price using test data
predicted_price_rf <- predict(rf_model, newdata = test_data)
# Evaluate the model
# Calculate Mean Absolute Error (MAE)
MAE_rf <- mean(abs(predicted_price_rf - Price))
# Calculate Root Mean Squared Error (RMSE)
RMSE_rf <- sqrt(mean((predicted_price_rf - Price)^2))
# Calculate R-squared value
R_squared_rf <- cor(predicted_price_rf, Price)^2
print(paste("Mean Absolute Error (MAE) with Random Forest:", MAE_rf))
print(paste("Root Mean Squared Error (RMSE) with Random Forest:", RMSE_rf))
print(paste("R-squared with Random Forest:", R_squared_rf))
saveRDS(rf_model, file = "random_forest_model.rds")
runApp('ShinyApp/Used_Car_PricePrediction')
runApp('ShinyApp/Used_Car_PricePrediction')
runApp('ShinyApp/Used_Car_PricePrediction')
runApp('ShinyApp/Used_Car_PricePrediction')
mymodel1 <- readRDS("O:/Ds Project/dataset/Used_Car_DataSet/random_forest_model.rds")
runApp('ShinyApp/Used_Car_PricePrediction')
Summary(lm_model)
source("O:/Ds Project/dataset/Used_Car_DataSet/linear_Regression.R")
summary(lm_model)
source("O:/Ds Project/dataset/Used_Car_DataSet/RandomForest.R")
mymodel <- readRDS("O:/Ds Project/dataset/Used_Car_DataSet/random_forest_model.rds")
runApp('ShinyApp/Used_Car_PricePrediction')
